$date
	Wed Nov 29 22:02:48 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module CPU_TB $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$var reg 1 # rst $end
$scope module cpu $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 1 # rst $end
$var wire 1 $ we_memwb $end
$var wire 1 % we_idex $end
$var wire 1 & we_exmem $end
$var wire 1 ' we $end
$var wire 32 ( sum_out_memwb [31:0] $end
$var wire 32 ) sum_out_ifid [31:0] $end
$var wire 32 * sum_out_idex [31:0] $end
$var wire 32 + sum_out_exmem [31:0] $end
$var wire 32 , sum_out [31:0] $end
$var wire 1 - store_idex $end
$var wire 1 . store_exmem $end
$var wire 1 / store $end
$var wire 3 0 salida_funct3_idex [2:0] $end
$var wire 3 1 salida_funct3 [2:0] $end
$var wire 5 2 rs2_idex [4:0] $end
$var wire 5 3 rs1_idex [4:0] $end
$var wire 32 4 result_memwb [31:0] $end
$var wire 32 5 result_exmem [31:0] $end
$var wire 32 6 result [31:0] $end
$var wire 5 7 rd_memwb [4:0] $end
$var wire 5 8 rd_idex [4:0] $end
$var wire 5 9 rd_exmem [4:0] $end
$var wire 32 : pc_out_ifid [31:0] $end
$var wire 32 ; pc_out_idex [31:0] $end
$var wire 32 < pc_out [31:0] $end
$var wire 32 = pc_in [31:0] $end
$var wire 32 > operand2 [31:0] $end
$var wire 32 ? operand1 [31:0] $end
$var wire 1 @ load_idex $end
$var wire 1 A load_exmem $end
$var wire 32 B load_data [31:0] $end
$var wire 32 C loadData_memwb [31:0] $end
$var wire 1 D load $end
$var wire 32 E instruction_ifid [31:0] $end
$var wire 32 F instruction [31:0] $end
$var wire 32 G imm_idex [31:0] $end
$var wire 32 H imm_exmem [31:0] $end
$var wire 32 I imm32 [31:0] $end
$var wire 1 J hazard_detection $end
$var wire 3 K funct_imm [2:0] $end
$var wire 32 L data2_mux [31:0] $end
$var wire 32 M data2_idex [31:0] $end
$var wire 32 N data2_exmem [31:0] $end
$var wire 32 O data2 [31:0] $end
$var wire 32 P data1_mux [31:0] $end
$var wire 32 Q data1_idex [31:0] $end
$var wire 32 R data1_exmem [31:0] $end
$var wire 32 S data1 [31:0] $end
$var wire 32 T data [31:0] $end
$var wire 2 U controlRF_memwb [1:0] $end
$var wire 2 V controlRF_idex [1:0] $end
$var wire 2 W controlRF_exmem [1:0] $end
$var wire 2 X controlRF [1:0] $end
$var wire 1 Y controlOp1_idex $end
$var wire 1 Z controlOp1 $end
$var wire 1 [ controlALU_idex $end
$var wire 1 \ controlALU $end
$var wire 2 ] control2 [1:0] $end
$var wire 2 ^ control1 [1:0] $end
$var wire 3 _ Type_dm_idex [2:0] $end
$var wire 3 ` Type_dm_exmem [2:0] $end
$var wire 3 a Type_dm [2:0] $end
$var wire 1 b Type_alu_dm_idex $end
$var wire 1 c Type_alu_dm $end
$var wire 1 d NextPCSrc $end
$var wire 5 e BrOp_idex [4:0] $end
$var wire 5 f BrOp [4:0] $end
$var parameter 32 g TAM $end
$var reg 3 h funct3 [2:0] $end
$var reg 7 i funct7 [6:0] $end
$var reg 25 j immediate [24:0] $end
$var reg 7 k opcode [6:0] $end
$var reg 5 l rd [4:0] $end
$var reg 1 m read $end
$var reg 5 n rs1 [4:0] $end
$var reg 5 o rs2 [4:0] $end
$scope module alu $end
$var wire 1 p clk $end
$var wire 32 q operand2 [31:0] $end
$var wire 32 r operand1 [31:0] $end
$var wire 3 s funct3_alu [2:0] $end
$var wire 1 b Type_alu $end
$var reg 1 t bit_significativo $end
$var reg 32 u conteo [31:0] $end
$var reg 32 v result [31:0] $end
$upscope $end
$scope module branch $end
$var wire 32 w RUrs2 [31:0] $end
$var wire 32 x RUrs1 [31:0] $end
$var wire 5 y BrOp [4:0] $end
$var reg 1 d NextPCSrc $end
$upscope $end
$scope module cu $end
$var wire 3 z funct3 [2:0] $end
$var wire 7 { funct7 [6:0] $end
$var wire 7 | opcode [6:0] $end
$var reg 5 } BrOp [4:0] $end
$var reg 1 c Type_alu $end
$var reg 3 ~ Type_dm [2:0] $end
$var reg 1 \ controlALU $end
$var reg 1 Z controlOp1 $end
$var reg 2 !" controlRF [1:0] $end
$var reg 3 "" funct_imm [2:0] $end
$var reg 1 D load $end
$var reg 3 #" salida_funct3 [2:0] $end
$var reg 1 / store $end
$var reg 1 ' we $end
$upscope $end
$scope module dm $end
$var wire 1 ! clk $end
$var wire 32 $" store_data [31:0] $end
$var wire 1 . store $end
$var wire 32 %" offset [31:0] $end
$var wire 1 A load $end
$var wire 32 &" direccion [31:0] $end
$var wire 32 '" address [31:0] $end
$var wire 3 (" Type [2:0] $end
$var parameter 32 )" TAM $end
$var reg 32 *" count [31:0] $end
$var reg 32 +" data [31:0] $end
$var reg 32 ," load_data [31:0] $end
$upscope $end
$scope module exmem $end
$var wire 1 ! clk $end
$var wire 32 -" result_in [31:0] $end
$var wire 1 # rst $end
$var wire 1 % we_in $end
$var wire 32 ." sum_out_in [31:0] $end
$var wire 1 - store_in $end
$var wire 5 /" rd_in [4:0] $end
$var wire 1 @ load_in $end
$var wire 32 0" imm_in [31:0] $end
$var wire 32 1" data2_in [31:0] $end
$var wire 32 2" data1_in [31:0] $end
$var wire 2 3" controlRF_in [1:0] $end
$var wire 3 4" Type_dm_in [2:0] $end
$var reg 3 5" Type_dm_out [2:0] $end
$var reg 2 6" controlRF_out [1:0] $end
$var reg 32 7" data1_out [31:0] $end
$var reg 32 8" data2_out [31:0] $end
$var reg 32 9" imm_out [31:0] $end
$var reg 1 A load_out $end
$var reg 5 :" rd_out [4:0] $end
$var reg 32 ;" result_out [31:0] $end
$var reg 1 . store_out $end
$var reg 32 <" sum_out_out [31:0] $end
$var reg 1 & we_out $end
$upscope $end
$scope module forward $end
$var wire 1 & RUWrme $end
$var wire 5 =" rd_mem [4:0] $end
$var wire 5 >" rs2_idex [4:0] $end
$var wire 5 ?" rs1_idex [4:0] $end
$var wire 5 @" rd_wb [4:0] $end
$var wire 1 $ RUWrwb $end
$var reg 2 A" control1 [1:0] $end
$var reg 2 B" control2 [1:0] $end
$upscope $end
$scope module hazard $end
$var wire 5 C" loadRs1 [4:0] $end
$var wire 5 D" loadRs2 [4:0] $end
$var wire 5 E" loadRd [4:0] $end
$var wire 1 @ load $end
$var reg 1 J control $end
$upscope $end
$scope module idex $end
$var wire 5 F" BrOp_in [4:0] $end
$var wire 1 d NextPCSrc_in $end
$var wire 1 c Type_alu_in $end
$var wire 3 G" Type_dm_in [2:0] $end
$var wire 1 ! clk $end
$var wire 1 \ controlALU_in $end
$var wire 1 Z controlOp1_in $end
$var wire 2 H" controlRF_in [1:0] $end
$var wire 3 I" funct3_alu_in [2:0] $end
$var wire 1 J hazard_detection $end
$var wire 1 D load_in $end
$var wire 5 J" rd_in [4:0] $end
$var wire 5 K" rs1_in [4:0] $end
$var wire 5 L" rs2_in [4:0] $end
$var wire 1 # rst $end
$var wire 1 / store_in $end
$var wire 1 ' we_in $end
$var wire 32 M" sum_out_in [31:0] $end
$var wire 32 N" pc_out_in [31:0] $end
$var wire 32 O" imm_in [31:0] $end
$var wire 32 P" data2_in [31:0] $end
$var wire 32 Q" data1_in [31:0] $end
$var reg 5 R" BrOp_out [4:0] $end
$var reg 1 b Type_alu_out $end
$var reg 3 S" Type_dm_out [2:0] $end
$var reg 1 [ controlALU_out $end
$var reg 1 Y controlOp1_out $end
$var reg 2 T" controlRF_out [1:0] $end
$var reg 32 U" data1_out [31:0] $end
$var reg 32 V" data2_out [31:0] $end
$var reg 3 W" funct3_alu_out [2:0] $end
$var reg 32 X" imm_out [31:0] $end
$var reg 1 @ load_out $end
$var reg 32 Y" pc_out_out [31:0] $end
$var reg 5 Z" rd_out [4:0] $end
$var reg 5 [" rs1_out [4:0] $end
$var reg 5 \" rs2_out [4:0] $end
$var reg 1 - store_out $end
$var reg 32 ]" sum_out_out [31:0] $end
$var reg 1 % we_out $end
$upscope $end
$scope module ifid $end
$var wire 1 d NextPCSrc_in $end
$var wire 1 ! clk $end
$var wire 1 J hazard_detection $end
$var wire 1 # rst $end
$var wire 32 ^" sum_out_in [31:0] $end
$var wire 32 _" pc_out_in [31:0] $end
$var wire 32 `" instruction_in [31:0] $end
$var reg 32 a" instruction_out [31:0] $end
$var reg 32 b" pc_out_out [31:0] $end
$var reg 32 c" sum_out_out [31:0] $end
$upscope $end
$scope module im $end
$var wire 32 d" pc [31:0] $end
$var parameter 32 e" TAM $end
$var reg 32 f" instruction [31:0] $end
$var reg 32 g" pc_in [31:0] $end
$upscope $end
$scope module imm $end
$var wire 3 h" funct [2:0] $end
$var wire 25 i" immediate [24:0] $end
$var reg 32 j" imm32 [31:0] $end
$upscope $end
$scope module memwb $end
$var wire 1 ! clk $end
$var wire 2 k" controlRF_in [1:0] $end
$var wire 32 l" loadData_in [31:0] $end
$var wire 5 m" rd_in [4:0] $end
$var wire 32 n" result_in [31:0] $end
$var wire 1 # rst $end
$var wire 32 o" sum_out_in [31:0] $end
$var wire 1 & we_in $end
$var reg 2 p" controlRF_out [1:0] $end
$var reg 32 q" loadData_out [31:0] $end
$var reg 5 r" rd_out [4:0] $end
$var reg 32 s" result_out [31:0] $end
$var reg 32 t" sum_out_out [31:0] $end
$var reg 1 $ we_out $end
$upscope $end
$scope module mux1 $end
$var wire 1 [ control $end
$var wire 32 u" entrada2 [31:0] $end
$var wire 32 v" entrada1 [31:0] $end
$var reg 32 w" salida [31:0] $end
$upscope $end
$scope module mux2 $end
$var wire 2 x" control [1:0] $end
$var wire 32 y" entrada1 [31:0] $end
$var wire 32 z" entrada2 [31:0] $end
$var wire 32 {" entrada3 [31:0] $end
$var wire 32 |" salida [31:0] $end
$upscope $end
$scope module mux3 $end
$var wire 1 d control $end
$var wire 32 }" entrada2 [31:0] $end
$var wire 32 ~" entrada1 [31:0] $end
$var reg 32 !# salida [31:0] $end
$upscope $end
$scope module mux4 $end
$var wire 1 Y control $end
$var wire 32 "# entrada2 [31:0] $end
$var wire 32 ## entrada1 [31:0] $end
$var reg 32 $# salida [31:0] $end
$upscope $end
$scope module mux_data1 $end
$var wire 2 %# control [1:0] $end
$var wire 32 &# entrada1 [31:0] $end
$var wire 32 '# entrada2 [31:0] $end
$var wire 32 (# entrada3 [31:0] $end
$var wire 32 )# salida [31:0] $end
$upscope $end
$scope module mux_data2 $end
$var wire 2 *# control [1:0] $end
$var wire 32 +# entrada1 [31:0] $end
$var wire 32 ,# entrada2 [31:0] $end
$var wire 32 -# entrada3 [31:0] $end
$var wire 32 .# salida [31:0] $end
$upscope $end
$scope module pc $end
$var wire 1 ! clk $end
$var wire 1 J enable $end
$var wire 32 /# pc_in [31:0] $end
$var reg 32 0# pc_out [31:0] $end
$var reg 1 1# reset $end
$upscope $end
$scope module rf $end
$var wire 1 $ WriteEnable $end
$var wire 1 ! clk $end
$var wire 32 2# data [31:0] $end
$var wire 5 3# rd [4:0] $end
$var wire 5 4# rs1 [4:0] $end
$var wire 5 5# rs2 [4:0] $end
$var wire 1 # rst $end
$var reg 32 6# data1 [31:0] $end
$var reg 32 7# data2 [31:0] $end
$var reg 32 8# i [31:0] $end
$upscope $end
$scope module sumador $end
$var wire 32 9# pc [31:0] $end
$var reg 32 :# sum_out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1111111111 e"
b1111111111 )"
b1111111111 g
$end
#0
$dumpvars
b100 :#
b0 9#
b100000 8#
bx 7#
bx 6#
bx 5#
bx 4#
b0 3#
b0 2#
01#
b0 0#
b100 /#
b0 .#
b0 -#
b0 ,#
b0 +#
b0 *#
b0 )#
b0 (#
b0 '#
b0 &#
b0 %#
b0 $#
b0 ##
b0 "#
b100 !#
b100 ~"
b0 }"
b0 |"
b0 {"
b0 z"
b0 y"
b0 x"
b0 w"
b0 v"
b0 u"
b0 t"
b0 s"
b0 r"
b0 q"
b0 p"
b0 o"
b0 n"
b0 m"
bx l"
b0 k"
bx j"
bx i"
bx h"
bx g"
b1010000000000010100010011 f"
b0 d"
b0 c"
b0 b"
b0 a"
b1010000000000010100010011 `"
b0 _"
b100 ^"
b0 ]"
b0 \"
b0 ["
b0 Z"
b0 Y"
b0 X"
b0 W"
b0 V"
b0 U"
b0 T"
b0 S"
b0 R"
bx Q"
bx P"
bx O"
b0 N"
b0 M"
bx L"
bx K"
bx J"
bx I"
bx H"
bx G"
bx F"
b0 E"
bx D"
bx C"
b0 B"
b0 A"
b0 @"
b0 ?"
b0 >"
b0 ="
b0 <"
b0 ;"
b0 :"
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
bx ,"
bx +"
bx *"
b0 ("
b0 '"
b0 &"
b0 %"
b0 $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
b0 y
b0 x
b0 w
b0 v
bx u
xt
b0 s
b0 r
b0 q
zp
bx o
bx n
1m
bx l
bx k
bx j
bx i
bx h
bx f
b0 e
0d
xc
0b
bx a
b0 `
b0 _
b0 ^
b0 ]
x\
0[
xZ
0Y
bx X
b0 W
b0 V
b0 U
b0 T
bx S
b0 R
b0 Q
b0 P
bx O
b0 N
b0 M
b0 L
bx K
0J
bx I
b0 H
b0 G
b1010000000000010100010011 F
b0 E
xD
b0 C
bx B
xA
0@
b0 ?
b0 >
b100 =
b0 <
b0 ;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
b0 4
b0 3
b0 2
bx 1
b0 0
x/
0.
0-
b100 ,
b0 +
b0 *
b0 )
b0 (
x'
0&
0%
0$
1#
x"
1!
$end
#5
b0 j
b0 h"
b0 o
b0 D"
b0 L"
b0 4#
b0 n
b0 C"
b0 K"
b0 3#
b0 l
b0 J"
b0 i
b0 {
b0 h
b0 z
b0 k
b0 |
0!
#10
b1111000000000010110010011 F
b1111000000000010110010011 `"
b1111000000000010110010011 f"
b1000 =
b1000 ~"
b1000 .#
bx T
bx {"
bx '#
bx ,#
bx 1#
bx L
bx w
bx 1"
bx u"
bx -#
bx P
bx x
bx "#
bx (#
b1000 ,
b1000 ^"
b1000 }"
b1000 9#
bx C
bx p"
bx x"
0A
x@
xY
bx e
bx y
bx R"
bx _
bx 4"
bx S"
xb
bx 0
bx s
bx W"
x-
x[
bx V
bx 3"
bx T"
x%
bx G
bx 0"
bx X"
bx t"
bx M
bx V"
bx *#
bx Q
bx U"
bx %#
b1010000000000010100010011 E
b1010000000000010100010011 a"
b100 )
b100 M"
b100 c"
b0 O
b0 P"
b0 6#
b0 S
b0 Q"
b0 5#
b100 <
b100 _"
b100 d"
b100 0#
b100 9#
b10100 I
b10100 O"
b10100 j"
0c
b0 1
b0 #"
b0 I"
b0 K
b0 ""
b0 h"
b1 X
b1 !"
b1 H"
1'
0Z
1\
b0 f
b0 }
b0 F"
0D
0/
b100000 8#
b101000000000001010 j
b101000000000001010 i"
b10100 o
b10100 D"
b10100 L"
b10100 5#
b1010 l
b1010 J"
b10011 k
b10011 |
0!
#20
b101101010001011001100011 F
b101101010001011001100011 `"
b101101010001011001100011 f"
b1100 =
b1100 ~"
b1100 .#
b1100 ,
b1100 ^"
b1100 }"
b1100 9#
b10100 6
b10100 v
b10100 -"
b10100 }"
b10100 >
b10100 q
b10100 v"
b0 L
b0 w
b0 1"
b0 u"
b0 -#
b0 P
b0 x
b0 "#
b0 (#
b1000 <
b1000 _"
b1000 d"
b1000 /#
b1000 8#
b1111000000000010110010011 E
b1111000000000010110010011 a"
b100 :
b100 N"
b100 b"
b1000 )
b1000 M"
b1000 c"
0@
0Y
b0 e
b0 y
b0 R"
0b
b0 0
b0 s
b0 W"
0-
1[
b1 V
b1 3"
b1 T"
1%
b10100 2
b10100 >"
b10100 \"
b1010 8
b1010 /"
b1010 E"
b1010 Z"
b10100 G
b10100 0"
b10100 X"
b10100 t"
b0 M
b0 V"
b0 *#
b0 Q
b0 U"
b0 %#
b100 *
b100 ."
b100 ]"
xA
x.
bx N
bx $"
bx 8"
bx `
bx ("
bx 5"
bx W
bx 6"
bx j"
x&
bx '"
bx H
bx %"
bx 9"
b100000 7#
1!
#25
b11110 I
b11110 O"
b11110 i"
b111100000000001011 j
b111100000000001011 h"
b11110 o
b11110 D"
b11110 L"
b11110 4#
b1011 l
b1011 J"
0!
#30
b101101010000011000110011 F
b101101010000011000110011 `"
b101101010000011000110011 f"
b11110 6
b11110 v
b11110 -"
b11110 |"
b10000 =
b10000 ~"
b10000 .#
b11110 >
b11110 q
b11110 v"
b10000 ,
b10000 ^"
b10000 }"
b10000 9#
x$
bx U
bx o"
bx w"
0A
0.
b1 W
b1 6"
b1 k"
1&
b1010 9
b1010 :"
b1010 ="
b1010 m"
b10100000 '"
b10100 H
b10100 %"
b10100 9"
b10100 5
b10100 ;"
b10100 n"
b10100 '#
b10100 ,#
b100 +
b100 <"
b100 o"
x$
bx U
bx p"
bx x"
b100000 8#
b101000000000001011 j
b101000000000001011 i"
b1011 l
b1011 J"
1!
#25
b1111000000000011000010011 E
b1111000000000011000010011 a"
b1000 :
b1000 N"
b1000 b"
b1100 )
b1100 M"
b1100 c"
b1011 8
b1011 /"
b1011 E"
b1011 Z"
b100 ;
b100 Y"
b100 "#
b1000 *
b1000 ."
b1000 ]"
b101101010001011001100011 E
b101101010001011001100011 a"
b1000 :
b1000 N"
b1000 b"
b1100 )
b1100 M"
b1100 c"
b1100 <
b1100 _"
b1100 d"
b1100 0#
b1100 9#
b11110 I
b11110 O"
b11110 j"
b100000 8#
b111100000000001100 j
b111100000000001100 i"
b11110 o
b11110 D"
b11110 L"
b11110 5#
b1100 l
b1100 J"
1!
#35
b1100 I
b1100 O"
b1100 j"
b1001 f
b1001 }
b1001 F"
b10 K
b10 ""
b10 h"
1Z
0'
b100000 8#
b10110101000101100 j
b10110101000101100 h"
b1011 o
b1011 D"
b1011 L"
b1011 5#
b1010 n
b1010 C"
b1010 K"
b1010 3#
b1100 l
b1100 J"
b1 h
b1 z
b1100011 k
b1100011 |
0!
#40
b101101010000011010110011 F
b101101010000011010110011 `"
b101101010000011010110011 f"
1d
b10100 =
b10100 !#
b10100 /#
b10100 L
b10100 w
b10100 1"
b10100 v"
b10100 .#
b10100 6
b10100 v
b10100 -"
b10100 |"
b11110 L
b11110 w
b11110 1"
b11110 u"
b11110 -#
b10100 P
b10100 x
b10100 "#
b10100 (#
b10100 ,
b10100 ^"
b10100 }"
b10100 9#
b1100 >
b1100 q
b1100 v"
b1000 ?
b1000 r
b1000 2"
b1000 ##
b1 ]
b1 B"
b1 )#
b10 ^
b10 A"
b10 $#
b10100 T
b10100 {"
b10100 '#
b10100 ,#
b10100 1#
b10000 <
b10000 _"
b10000 d"
b10000 /#
b10000 8#
b101101010000011000110011 E
b101101010000011000110011 a"
b1100 :
b1100 N"
b1100 b"
b10000 )
b10000 M"
b10000 c"
1Y
b1001 e
b1001 y
b1001 R"
0%
b1011 2
b1011 >"
b1011 \"
b1010 3
b1010 ?"
b1010 ["
b1100 G
b1100 0"
b1100 X"
b1100 u"
b10100 Q
b10100 U"
b10100 &#
b1100 ;
b1100 Y"
b1100 "#
b10000 *
b10000 ."
b10000 ]"
0!
#50
b101101010000011100110011 F
b101101010000011100110011 `"
b101101010000011100110011 f"
b11110 T
b11110 |"
b11110 (#
b11110 -#
b11110 2#
b0 L
b0 w
b0 1"
b0 u"
b0 -#
b0 P
b0 x
b0 "#
b0 (#
b0 6
b0 v
b0 -"
b0 |"
b11000 =
b11000 !#
b11000 /#
b0 ]
b0 B"
b0 )#
b0 ^
b0 A"
b0 $#
0d
b0 ?
b0 r
b0 2"
b0 ##
b0 >
b0 q
b0 v"
b11000 ,
b11000 ^"
b11000 ~"
b11000 :#
b1100 7
b1100 @"
b1100 r"
b1100 3#
b11110 4
b11110 r"
b11110 y"
b1000 (
b1000 s"
b1000 z"
b11110 N
b11110 $"
b11110 8"
b1000 R
b1000 &"
b1000 7"
0&
b1100 9
b1100 :"
b1100 ="
b1100 l"
b10100000 '"
b1100 H
b1100 %"
b1100 9"
b10100 5
b10100 ;"
b10100 m"
b10100 &#
b10100 +#
b1100 +
b1100 <"
b1100 n"
b0 2
b0 >"
b0 \"
b0 3
b0 ?"
b0 ["
b0 8
b0 /"
b0 E"
b0 Z"
b0 G
b0 0"
b0 X"
b0 t"
b0 *
b0 ."
b0 ]"
b0 ;
b0 Y"
b0 !#
b0 e
b0 y
b0 R"
b0 _
b0 4"
b0 S"
0Y
0[
b0 V
b0 3"
b0 T"
b0 :
b0 N"
b0 b"
b0 )
b0 M"
b0 c"
b0 E
b0 a"
b10100 S
b10100 Q"
b10100 5#
b10100 <
b10100 _"
b10100 d"
b10100 /#
b10100 8#
b100000 7#
1!
#55
b0 I
b0 O"
b0 j"
b100000 8#
b0 j
b0 i"
b0 o
b0 D"
b0 L"
b0 5#
b0 n
b0 C"
b0 K"
b0 4#
b0 l
b0 J"
b0 k
b0 |
0!
#60
b0 F
b0 `"
b0 f"
b10100 6
b10100 v
b10100 -"
b10100 |"
b11100 =
b11100 ~"
b11100 .#
b10100 ?
b10100 r
b10100 2"
b10100 ##
b10100 T
b10100 {"
b10100 '#
b10100 ,#
b10100 1#
b11100 ,
b11100 ^"
b11100 }"
b11100 9#
b10100 P
b10100 x
b10100 "#
b10100 (#
b11000 <
b11000 _"
b11000 d"
b11000 /#
b11000 8#
b0 S
b0 Q"
b0 5#
b101101010000011100110011 E
b101101010000011100110011 a"
b10100 :
b10100 N"
b10100 b"
b11000 )
b11000 M"
b11000 c"
bx _
bx 4"
bx S"
b1 V
b1 3"
b1 T"
1%
b10100 Q
b10100 U"
b10100 %#
b0 N
b0 $"
b0 8"
b0 R
b0 &"
b0 7"
bx `
bx ("
bx 5"
b1 W
b1 6"
b1 k"
1&
b0 9
b0 :"
b0 ="
b0 m"
b0 '"
b0 H
b0 %"
b0 9"
b0 5
b0 ;"
b0 n"
b0 '#
b0 ,#
b0 +
b0 <"
b0 n"
b1100 7
b1100 @"
b1100 q"
b1100 2#
0$
b10100 4
b10100 r"
b10100 y"
b1100 (
b1100 s"
b1100 z"
b100000 7#
1!
#65
b1110 I
b1110 O"
b1110 j"
b100000 8#
b10110110000001110 j
b10110110000001110 i"
b1011 o
b1011 D"
b1011 L"
b1011 5#
b1100 n
b1100 C"
b1100 K"
b1100 4#
b1110 l
b1110 J"
b110011 k
b110011 |
0!
#70
bx F
bx `"
bx f"
b0 6
b0 v
b0 -"
b0 |"
b0 ?
b0 r
b0 2"
b0 ##
b100000 =
b100000 ~"
b100000 .#
bx T
bx {"
bx '#
bx ,#
bx 1#
b0 P
b0 x
b0 "#
b0 (#
b100000 ,
b100000 ^"
b100000 }"
b100000 9#
b0 7
b0 @"
b0 q"
b0 2#
b0 U
b0 o"
b0 w"
b0 4
b0 r"
b0 y"
b0 (
b0 s"
b0 z"
b10100000 '"
b10100 R
b10100 &"
b10100 7"
bx `
bx ("
bx 5"
b1 W
b1 6"
b1 j"
1&
b10100 5
b10100 ;"
b10100 m"
b10100 &#
b10100 +#
b1011 2
b1011 >"
b1011 \"
b1100 3
b1100 ?"
b1100 ["
b1110 8
b1110 /"
b1110 E"
b1110 Z"
b1110 G
b1110 0"
b1110 X"
b1110 t"
b0 Q
b0 U"
b0 %#
b10100 ;
b10100 Y"
b10100 !#
b11000 *
b11000 ."
b11000 ]"
b0 E
b0 a"
b11000 :
b11000 N"
b11000 b"
b11100 )
b11100 M"
b11100 c"
b11110 O
b11110 P"
b11110 6#
b10100 S
b10100 Q"
b10100 5#
b11100 <
b11100 _"
b11100 d"
b11100 /#
b11100 8#
b100000 7#
1!
#75
b0 I
b0 O"
b0 j"
b100000 8#
b0 j
b0 i"
b0 o
b0 D"
b0 L"
b0 5#
b0 n
b0 C"
b0 K"
b0 4#
b0 l
b0 J"
b0 k
b0 |
0!
#80
b100100 =
b100100 ~"
b100100 .#
b101000 6
b101000 v
b101000 -"
b101000 |"
b10100 ?
b10100 r
b10100 2"
b10100 ##
b100100 ,
b100100 ^"
b100100 }"
b100100 9#
b10100 >
b10100 q
b10100 v"
b10100 L
b10100 w
b10100 1"
b10100 u"
b10100 -#
b10100 P
b10100 x
b10100 "#
b10100 (#
b10 ]
b10 B"
b10 *#
b10 ^
b10 A"
b10 $#
b10100 T
b10100 {"
b10100 '#
b10100 ,#
b10100 1#
b100000 <
b100000 _"
b100000 d"
b100000 /#
b100000 8#
b0 O
b0 P"
b0 6#
b0 S
b0 Q"
b0 5#
bx E
bx a"
b11100 :
b11100 N"
b11100 b"
b100000 )
b100000 M"
b100000 c"
b0 2
b0 >"
b0 \"
b0 3
b0 ?"
b0 ["
b0 8
b0 /"
b0 E"
b0 Z"
b0 G
b0 0"
b0 X"
b0 t"
b11110 M
b11110 V"
b11110 *#
b10100 Q
b10100 U"
b10100 %#
b11000 ;
b11000 Y"
b11000 !#
b11100 *
b11100 ."
b11100 ]"
b0 R
b0 &"
b0 7"
b1110 9
b1110 :"
b1110 ="
b1110 l"
b1110000 '"
b1110 H
b1110 %"
b1110 9"
b0 5
b0 ;"
b0 m"
b0 &#
b0 +#
b11000 +
b11000 <"
b11000 n"
1$
b1 U
b1 o"
b1 w"
b10100 4
b10100 r"
b10100 y"
b100000 7#
1!
#85
bx0 I
bx0 O"
bx0 i"
bx j
bx i"
bx o
bx D"
bx L"
bx 5#
bx n
bx C"
bx K"
bx 4#
bx l
bx J"
bx i
bx {
bx h
bx z
bx k
bx |
0!
#90
b0 6
b0 v
b0 -"
b0 |"
b0 >
b0 q
b0 v"
b0 ?
b0 r
b0 2"
b0 ##
b0 T
b0 {"
b0 '#
b0 ,#
b0 1#
b0 L
b0 w
b0 1"
b0 u"
b0 -#
b0 P
b0 x
b0 "#
b0 (#
b101000 =
b101000 ~"
b101000 .#
b0 ]
b0 B"
b0 *#
b0 ^
b0 A"
b0 $#
b101000 ,
b101000 ^"
b101000 }"
b101000 9#
b1110 7
b1110 @"
b1110 q"
b1110 2#
b0 4
b0 r"
b0 y"
b11000 (
b11000 s"
b11000 z"
b10100 N
b10100 $"
b10100 8"
b10100 R
b10100 &"
b10100 7"
b0 9
b0 :"
b0 ="
b0 l"
b10100000 '"
b0 H
b0 %"
b0 9"
b101000 5
b101000 ;"
b101000 m"
b101000 &#
b101000 +#
b11100 +
b11100 <"
b11100 n"
bx 2
bx >"
bx \"
bx 3
bx ?"
bx ["
bx 8
bx /"
bx E"
bx Z"
bx0 G
bx0 0"
bx0 X"
bx0 t"
b0 M
b0 V"
b0 *#
b0 Q
b0 U"
b0 %#
b11100 ;
b11100 Y"
b11100 !#
b100000 *
b100000 ."
b100000 ]"
b100000 :
b100000 N"
b100000 b"
b100100 )
b100100 M"
b100100 c"
bx O
bx P"
bx 6#
bx S
bx Q"
bx 5#
b100100 <
b100100 _"
b100100 d"
b100100 /#
b100100 8#
b100000 7#
1!
#95
0!
#100
bx 6
bx v
bx -"
bx |"
b101100 =
b101100 ~"
b101100 .#
bx >
bx q
bx v"
bx ?
bx r
bx 2"
bx ##
b101000 T
b101000 {"
b101000 '#
b101000 ,#
b101000 1#
b101100 ,
b101100 ^"
b101100 }"
b101100 9#
bx L
bx w
bx 1"
bx u"
bx -#
bx P
bx x
bx "#
bx (#
b101000 <
b101000 _"
b101000 d"
b101000 /#
b101000 8#
b100100 :
b100100 N"
b100100 b"
b101000 )
b101000 M"
b101000 c"
bx M
bx V"
bx *#
bx Q
bx U"
bx %#
b100000 ;
b100000 Y"
b100000 "#
b100100 *
b100100 ."
b100100 ]"
b0 N
b0 $"
b0 8"
b0 R
b0 &"
b0 7"
bx 9
bx :"
bx ="
bx l"
bx '"
bx0 H
bx0 %"
bx0 9"
b0 5
b0 ;"
b0 m"
b0 &#
b0 +#
b100000 +
b100000 <"
b100000 n"
b0 7
b0 @"
b0 q"
b0 2#
b101000 4
b101000 r"
b101000 y"
b11100 (
b11100 s"
b11100 z"
b100000 7#
1!
#105
0!
#110
b0 T
b0 {"
b0 '#
b0 ,#
b0 1#
b110000 =
b110000 ~"
b110000 .#
b110000 ,
b110000 ^"
b110000 }"
b110000 9#
bx 7
bx @"
bx q"
bx 2#
b0 4
b0 r"
b0 y"
b100000 (
b100000 s"
b100000 z"
bx N
bx $"
bx 8"
bx R
bx &"
bx 7"
bx 5
bx ;"
bx m"
bx &#
bx +#
b100100 +
b100100 <"
b100100 o"
b0 7
b0 @"
b0 r"
b0 3#
b0 4
b0 s"
b0 z"
b100000 (
b100000 t"
b100000 {"
b100000 8#
1!
#105
b101000 :
b101000 N"
b101000 b"
b101100 )
b101100 M"
b101100 c"
b100100 ;
b100100 Y"
b100100 "#
b101000 *
b101000 ."
b101000 ]"
0!
#110
bx T
bx |"
bx (#
bx -#
bx 2#
b110000 =
b110000 !#
b110000 /#
b110000 ,
b110000 ^"
b110000 ~"
b110000 :#
bx 7
bx @"
bx r"
bx 3#
bx 4
bx s"
bx z"
b100100 (
b100100 t"
b100100 {"
b101000 +
b101000 <"
b101000 o"
b101100 <
b101100 _"
b101100 d"
b101100 0#
b101100 9#
b100000 8#
1!
#115
b101000 ;
b101000 Y"
b101000 "#
b101100 *
b101100 ."
b101100 ]"
b101100 :
b101100 N"
b101100 b"
b110000 )
b110000 M"
b110000 c"
0!
#120
b110100 =
b110100 ~"
b110100 .#
bx T
bx {"
bx '#
bx ,#
bx 1#
b110100 ,
b110100 ^"
b110100 ~"
b110100 :#
b110000 <
b110000 _"
b110000 d"
b110000 /#
b110000 8#
b101100 :
b101100 N"
b101100 b"
b110000 )
b110000 M"
b110000 c"
b101000 ;
b101000 Y"
b101000 !#
b101100 *
b101100 ."
b101100 ]"
b101000 +
b101000 <"
b101000 n"
bx 4
bx r"
bx y"
b100100 (
b100100 s"
b100100 z"
b100000 7#
1!
#125
0!
#130
b111000 =
b111000 ~"
b111000 .#
b111000 ,
b111000 ^"
b111000 }"
b111000 9#
b101000 (
b101000 s"
b101000 z"
b101100 +
b101100 <"
b101100 o"
b101000 (
b101000 t"
b101000 {"
b100000 8#
1!
#125
b110000 :
b110000 N"
b110000 b"
b110100 )
b110100 M"
b110100 c"
b101100 ;
b101100 Y"
b101100 "#
b110000 *
b110000 ."
b110000 ]"
0!
#130
b111000 =
b111000 !#
b111000 /#
b111000 ,
b111000 ^"
b111000 ~"
b111000 :#
b101100 (
b101100 t"
b101100 {"
b110000 +
b110000 <"
b110000 o"
b110100 <
b110100 _"
b110100 d"
b110100 0#
b110100 9#
b100000 8#
1!
